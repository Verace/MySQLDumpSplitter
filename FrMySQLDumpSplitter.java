package com.relvar.mysqldumpsplitter;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane; 

/**
 *
 * @author linehanp
 */
public class FrMySQLDumpSplitter extends javax.swing.JFrame
{
  
  ArrayList MySQLTables;
  String previousTableName = "";
  String currentTableName = "";
  
  String myDumpfileDirectory = "";
  
  /**
   * Creates new form FrMySQLDumpSplitter
   */
  public FrMySQLDumpSplitter()
  {
    this.MySQLTables = new ArrayList();
    previousTableName = "";
    currentTableName = "";
   
    initComponents();
     
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
  private void initComponents()
  {

    fileChooser1 = new javax.swing.JFileChooser();
    btnGenerateFiles = new javax.swing.JButton();
    tfDumpfile = new javax.swing.JTextField();
    jButton2 = new javax.swing.JButton();
    btnExit = new javax.swing.JButton();
    cbVanillaSQL = new javax.swing.JCheckBox();
    jTextField1 = new javax.swing.JTextField();
    cbWithData = new javax.swing.JCheckBox();

    fileChooser1.setDialogTitle("Dumpfile");

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("MySQL Dump file splitter");

    btnGenerateFiles.setLabel("Generate file(s)");
    btnGenerateFiles.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnGenerateFilesActionPerformed(evt);
      }
    });

    tfDumpfile.setText("Choose dumpfile...");
    tfDumpfile.setToolTipText("Paste filename in here or choose file");
    tfDumpfile.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        OnClickTFDumpfile(evt);
      }
    });
    tfDumpfile.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        tfDumpfileActionPerformed(evt);
      }
    });

    jButton2.setText("...");
    jButton2.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton2ActionPerformed(evt);
      }
    });

    btnExit.setText("Exit");
    btnExit.setToolTipText("Exit the application");
    btnExit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnExitActionPerformed(evt);
      }
    });

    cbVanillaSQL.setText("Generate \"vanilla SQL\"");
    cbVanillaSQL.setToolTipText("Takes the dumpfile, removes the MySQL ` character around table and field names and outputs the dump. \nMySQL Indexes and keys will be retained");
    cbVanillaSQL.setEnabled(false);

    jTextField1.setText("Destination file (cannot be the same as source).");
    jTextField1.setToolTipText("Destination (to be implemented...");
    jTextField1.setEnabled(false);

    cbWithData.setSelected(true);
    cbWithData.setText("With data?");
    cbWithData.setEnabled(false);
    cbWithData.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cbWithDataActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(143, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(cbVanillaSQL)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(btnGenerateFiles)
                  .addGap(37, 37, 37)
                  .addComponent(btnExit))
                .addGroup(layout.createSequentialGroup()
                  .addComponent(tfDumpfile, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addComponent(cbWithData))
            .addGap(128, 128, 128))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(140, 140, 140)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(tfDumpfile))
        .addGap(18, 18, 18)
        .addComponent(cbWithData)
        .addGap(21, 21, 21)
        .addComponent(cbVanillaSQL)
        .addGap(31, 31, 31)
        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnGenerateFiles)
          .addComponent(btnExit))
        .addGap(72, 72, 72))
    );

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>                        

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)                                         
  {                                             
    int returnVal = fileChooser1.showOpenDialog(this);

    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
      File file = fileChooser1.getSelectedFile();
     /* // try
     // {
        // What to do with the file, e.g. display it in a TextArea
        System.out.println("\nThis shows the file chooser is working!");  //textarea.read(new FileReader(file.getAbsolutePath()), null);
        System.out.println("\nThis file is called what - fileChooser1.getName(file) " + fileChooser1.getName(file));
        System.out.println("\nOr is it fileChooser1.getName()" + fileChooser1.getName());
        
        */
      tfDumpfile.setText(file.getAbsolutePath());
      
      myDumpfileDirectory = file.getParent();
      
      myDumpfileDirectory = myDumpfileDirectory + File.separator;
      
      JOptionPane.showMessageDialog(null,"You have chosen the dir " + myDumpfileDirectory,"Should be OK!",JOptionPane.WARNING_MESSAGE);
    }
    else
    {
      System.out.println("File access cancelled by user.");
    }// TODO add your handling code here:
  }                                        

  private void btnExitActionPerformed(java.awt.event.ActionEvent evt)                                        
  {                                            
    System.exit(0);    // TODO add your handling code here:
  }                                       

  private void btnGenerateFilesActionPerformed(java.awt.event.ActionEvent evt)                                                 
  {                                                     

    
    if(tfDumpfile.getText().equals("Choose dumpfile..."))
    {
      JOptionPane.showMessageDialog(null,"You must choose a dumpfile!","Warning! Error!",JOptionPane.WARNING_MESSAGE);
      return;
    }
    
    try
    {
      
      JOptionPane.showMessageDialog(null,"You must wait for the processing to finish (another message will appear!","Warning!",JOptionPane.WARNING_MESSAGE);
      
      BufferedReader myDumpfileReader = new BufferedReader(new FileReader(tfDumpfile.getText()));
//      BufferedWriter myDumpfileWriter = new BufferedWriter(new FileWriter("/users/ugrad/linehanp/mydb/bin/tgac_dump/Vanilla.sql"));
      
      SQLFormatHelper sqlHelper = new SQLFormatHelper();
      
      String dumpFileLine = myDumpfileReader.readLine();
      
      while((dumpFileLine = myDumpfileReader.readLine()) != null)
      {
        
        //dumpFileLine = sqlHelper.RemoveMySQLQuotes(dumpFileLine);
        
        if(dumpFileLine.startsWith("-- Table structure"))
        {
          
          
          String[] parts = dumpFileLine.split(" ");
          currentTableName = parts[5];
          BufferedWriter myTableFileWriter = new BufferedWriter(new FileWriter(myDumpfileDirectory + sqlHelper.RemoveMySQLQuotes(currentTableName) + ".sql"));
 
          myTableFileWriter.write("-- Table structure for table " + currentTableName + "\n");
          
          while((dumpFileLine = myDumpfileReader.readLine()) != null && !dumpFileLine.startsWith("UNLOCK TABLE"))
          {
            myTableFileWriter.write(dumpFileLine + "\n");
          }
          myTableFileWriter.write("UNLOCK TABLES;");
          myTableFileWriter.close();
        }  
      }
    }
    catch(Exception ex)
    {
      ex.printStackTrace();
    }
    
    JOptionPane.showMessageDialog(null,"Processing is complete", "Message", JOptionPane.INFORMATION_MESSAGE);
    
/*    Iterator itr = MySQLTables.iterator();
    
    while(itr.hasNext())
    {
      System.out.println("\nThe table name is: " + itr.next());
    } */
    
  }                                                

  private void tfDumpfileActionPerformed(java.awt.event.ActionEvent evt)                                           
  {                                               
    // TODO add your handling code here:
  }                                          

  private void OnClickTFDumpfile(java.awt.event.MouseEvent evt)                                   
  {                                       
    this.jButton2ActionPerformed(null); // TODO add your handling code here:
  }                                  

  private void cbWithDataActionPerformed(java.awt.event.ActionEvent evt)                                           
  {                                               
    // TODO add your handling code here:
  }                                          

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(FrMySQLDumpSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(FrMySQLDumpSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(FrMySQLDumpSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(FrMySQLDumpSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the form */
/*    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new FrMySQLDumpSplitter().setVisible(true);
      }
    });*/
  }

  // Variables declaration - do not modify                     
  private javax.swing.JButton btnExit;
  private javax.swing.JButton btnGenerateFiles;
  private javax.swing.JCheckBox cbVanillaSQL;
  private javax.swing.JCheckBox cbWithData;
  private javax.swing.JFileChooser fileChooser1;
  private javax.swing.JButton jButton2;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTextField tfDumpfile;
  // End of variables declaration                   
}
